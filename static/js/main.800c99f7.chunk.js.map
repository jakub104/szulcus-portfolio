{"version":3,"sources":["Images/projects/easyword.png","Images/projects/easycalc.png","Images/projects/easymath.png","App.js","serviceWorker.js","index.js","Images/avatar.jpg"],"names":["module","exports","AppComponent","styled","div","Avatar","props","src","Message","p","Projects","BrowserLink","a","Project","img","App","avatar","href","target","easyword","easycalc","easymath","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,swCCQ3C,IAAMC,EAAeC,IAAOC,IAAV,KAMZC,EAASF,IAAOC,IAAV,KAKQ,SAAAE,GAAK,OAAIA,EAAMC,OAM7BC,EAAUL,IAAOM,EAAV,KAGPC,EAAWP,IAAOC,IAAV,KAORO,EAAcR,IAAOS,EAAV,KAGXC,EAAUV,IAAOW,IAAV,KAiCEC,E,uKApBb,OACC,kBAACb,EAAD,KACC,kBAACG,EAAD,CAAQE,IAAKS,MACb,kBAACR,EAAD,iCACA,kBAACE,EAAD,KACC,kBAACC,EAAD,CAAaM,KAAK,2BAA2BC,OAAO,UACnD,kBAACL,EAAD,CAASN,IAAKY,OAEf,kBAACR,EAAD,CAAaM,KAAK,2BAA2BC,OAAO,UACnD,kBAACL,EAAD,CAASN,IAAKa,OAEf,kBAACT,EAAD,CAAaM,KAAK,2BAA2BC,OAAO,UACnD,kBAACL,EAAD,CAASN,IAAKc,a,GAdFC,aCrCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEzI5B1C,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.800c99f7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/easyword.cf05a652.png\";","module.exports = __webpack_public_path__ + \"static/media/easycalc.19552b4f.png\";","module.exports = __webpack_public_path__ + \"static/media/easymath.08adfec6.png\";","// BASIC\nimport React, { Component } from 'react'\nimport styled from 'styled-components'\n// IMAGES\nimport avatar from './Images/avatar.jpg'\nimport easyword from './Images/projects/easyword.png'\nimport easycalc from './Images/projects/easycalc.png'\nimport easymath from './Images/projects/easymath.png'\nconst AppComponent = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\tpadding: 30px;\n`\nconst Avatar = styled.div`\n\twidth: 90vw;\n\theight: 90vw;\n\tmax-width: 300px;\n\tmax-height: 300px;\n\tbackground: url(\"${props => props.src}\") no-repeat center center;\n\tbackground-size: cover;\n\tborder-radius: 100%;\n\ttransform: rotate(-90deg);\n\tmargin: 10px;\n`\nconst Message = styled.p`\n\tfont-size: 20px;\n`\nconst Projects = styled.div`\n\twidth: 90vw;\n\tmax-width: 1000px;\n\tdisplay: flex;\n\tjustify-content: center;\n\tflex-wrap: wrap;\n`\nconst BrowserLink = styled.a`\n\n`\nconst Project = styled.img`\n\twidth: 100px;\n\theight: 100px;\n\tmargin: 30px;\n\tborder-radius: 100%;\n\ttransition: all 0.3s ease;\n\t:hover {\n\t\tbox-shadow: 0 0 20px var(--color-primary);\n\t}\n`\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<AppComponent>\n\t\t\t\t<Avatar src={avatar} />\n\t\t\t\t<Message>Witaj na moim portfolio!</Message>\n\t\t\t\t<Projects>\n\t\t\t\t\t<BrowserLink href=\"https://easyword.web.app\" target=\"_blank\">\n\t\t\t\t\t\t<Project src={easyword} />\n\t\t\t\t\t</BrowserLink>\n\t\t\t\t\t<BrowserLink href=\"https://easycalc.web.app\" target=\"_blank\">\n\t\t\t\t\t\t<Project src={easycalc} />\n\t\t\t\t\t</BrowserLink>\n\t\t\t\t\t<BrowserLink href=\"https://easymath.web.app\" target=\"_blank\">\n\t\t\t\t\t\t<Project src={easymath} />\n\t\t\t\t\t</BrowserLink>\n\t\t\t\t</Projects>\n\t\t\t</AppComponent>\n\t\t);\n\t}\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/avatar.b7ad6d08.jpg\";"],"sourceRoot":""}